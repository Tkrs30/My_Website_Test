pour recuperer les infos dans les inputs : https://walkerspider.com/cours/laravel/request

public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'title' => 'required|unique:posts|max:255',
            'body' => 'required',
        ]);

        if ($validator->fails()) {
            return redirect('post/create')
                        ->withErrors($validator)
                        ->withInput();
        }

        // Retrieve the validated input...
        $validated = $validator->validated();

        // Retrieve a portion of the validated input...
        $validated = $validator->safe()->only(['name', 'email']);
        $validated = $validator->safe()->except(['name', 'email']);

        // Store the blog post...
    }
}

https://medium.com/@chrissoemma/laravel-5-8-delete-and-soft-delete-practical-examples-b9b71c0a97f#:~:text=When%20models%20are%20soft%20deleted,model%20has%20been%20soft%20deleted.

https://github.com/chrisoemma/noteapp/blob/master/app/Http/Controllers/NotesController.php

https://laravel.sillo.org/laravel-5-7-par-la-pratique-les-langues/

trier le tableau de la plus grande surface a la plus petite 
activer le bouton maison

pour post axios send post -> rechercher sur google

https://stackblitz.com/edit/axios-http-post-request-examples-lvlyv4?file=post-request-set-headers.js

APP_NAME="Maisons Hugo"
APP_ENV=local
APP_KEY=base64:HePJ+wgHUOi6TRF4Hmym32t8YXqgC1s3kMaNmcW1qvc=
APP_DEBUG=true
APP_URL=http://portal.test

LOG_CHANNEL=stack
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=portalbdd
DB_USERNAME=admin
DB_PASSWORD=password

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DRIVER=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=memcached

REDIS_HOST=redis
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailhog
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS=null
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=mt1

MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

SCOUT_DRIVER=meilisearch
MEILISEARCH_HOST=http://meilisearch:7700


pour modal regarder dans la doc bootstrap view pour toutes les infos

finis :
ajouter le sorting su tableau -> fait
ajout de colonne prix ttc prix * 20% -> fait
ajouter rowaction modifier/supprimer/Dupliquer -> fait
mettre en rouge le name -> fait
ajouter le rowselect et un bouton supprimer la selection -> fait
ajouter showdetail qui permet d'afficher le champ created_at en fr -> 3/4 fait
ajouter le filtering style taper maison pinar que y'ai que alfred pinar qui sorte -> fait sans triche
pagination intelligeante avec recuparation de la portion de donnée utile -> fait
mettre le prix en rouge uniquement si c'est > a un certain chiffre dans ce cas le texte dans la case devient clickable et afficher un modal ou y'a marqué c'est trop cher et dans ce modal bouton suppr intelligent.

pas finis :










public static char[] decode(char[]message, char[]entree, char[]sortie) {
    int identite = 0;

    for (int i = 0; i < message.lenght; i++) {
        identite = rang(message[i], entree); -> ici on recupere l'identite grace a ta fonction.
        message[i] = sortie[i]; -> ici je dis que la lettre qu'on 
                                   regarde on la remplace la lettre qu'on a encodé
    }
    return (message);
}

eloquent request :
    - https://qastack.fr/programming/13386774/using-eloquent-orm-in-laravel-to-perform-search-of-database-using-like
    - 